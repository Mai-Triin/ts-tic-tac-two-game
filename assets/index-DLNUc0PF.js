var X=Object.defineProperty;var F=(s,e,t)=>e in s?X(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var y=(s,e,t)=>F(s,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const n of document.querySelectorAll('link[rel="modulepreload"]'))o(n);new MutationObserver(n=>{for(const r of n)if(r.type==="childList")for(const c of r.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&o(c)}).observe(document,{childList:!0,subtree:!0});function t(n){const r={};return n.integrity&&(r.integrity=n.integrity),n.referrerPolicy&&(r.referrerPolicy=n.referrerPolicy),n.crossOrigin==="use-credentials"?r.credentials="include":n.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function o(n){if(n.ep)return;n.ep=!0;const r=t(n);fetch(n.href,r)}})();function j(s,e,t=0,o=0,n=3){const r=document.createElement("div");r.classList.add("board");for(let c=0;c<s.length;c++){const l=document.createElement("div");l.classList.add("row");for(let d=0;d<s[c].length;d++){const f=document.createElement("div");f.classList.add("cell"),c>=t&&c<t+n&&d>=o&&d<o+n&&f.classList.add("active-grid"),f.addEventListener("click",a=>e(c,d,a)),f.innerHTML=s[c][d]||"&nbsp;",l.appendChild(f)}r.appendChild(l)}return r}function M(s,e,t,o,n){const r=s.getElementsByClassName("cell");let c=0;for(let l=0;l<e.length;l++)for(let d=0;d<e[l].length;d++){const f=r[c];f.innerHTML=e[l][d]||"&nbsp;",f.classList.remove("active-grid"),l>=t&&l<t+n&&d>=o&&d<o+n&&f.classList.add("active-grid"),c++}}class q{constructor(e=5){y(this,"board");y(this,"currentPlayer","X");y(this,"moveCount",0);y(this,"maxPieces",4);y(this,"piecesPlaced",{X:0,O:0});y(this,"boardSize",5);y(this,"gridSize",3);y(this,"selectedPiece",null);y(this,"winner",null);y(this,"gridStartX");y(this,"gridStartY");y(this,"allowPieceMove",!1);this.boardSize=e,this.board=Array.from({length:e},()=>Array(e).fill(null)),this.gridStartX=Math.floor((this.boardSize-this.gridSize)/2),this.gridStartY=Math.floor((this.boardSize-this.gridSize)/2)}get boardState(){return this.board}makeAMove(e,t){return!this.isWithinGrid(e,t)||this.winner?!1:this.piecesPlaced[this.currentPlayer]<this.maxPieces&&this.board[e][t]===null?(this.board[e][t]=this.currentPlayer,this.piecesPlaced[this.currentPlayer]++,this.checkForWin(),this.winner||this.switchPlayer(),!0):!1}selectPiece(e,t){return this.board[e][t]===this.currentPlayer?(this.selectedPiece={x:e,y:t},!0):!1}movePiece(e,t){if(!this.selectedPiece||!this.isWithinGrid(e,t)||this.winner)return!1;const{x:o,y:n}=this.selectedPiece;return this.board[e][t]===null?(this.board[e][t]=this.currentPlayer,this.board[o][n]=null,this.selectedPiece=null,this.checkForWin(),this.winner||this.switchPlayer(),!0):!1}moveGrid(e){if(this.winner)return!1;const t={Up:[0,-1],Down:[0,1],Left:[-1,0],Right:[1,0],UpLeft:[-1,-1],UpRight:[1,-1],DownLeft:[-1,1],DownRight:[1,1]},[o,n]=t[e],r=this.gridStartX+o,c=this.gridStartY+n;return r>=0&&r+this.gridSize<=this.boardSize&&c>=0&&c+this.gridSize<=this.boardSize?(this.gridStartX=r,this.gridStartY=c,this.checkForWin(),this.winner||this.switchPlayer(),!0):!1}isWithinGrid(e,t){return e>=this.gridStartX&&e<this.gridStartX+this.gridSize&&t>=this.gridStartY&&t<this.gridStartY+this.gridSize}checkForWin(){for(let t=this.gridStartX;t<this.gridStartX+this.gridSize;t++)for(let o=this.gridStartY;o<this.gridStartY+this.gridSize;o++)if(this.board[t][o]!==null&&(this.checkLine(t,o,1,0,3)||this.checkLine(t,o,0,1,3)||this.checkLine(t,o,1,1,3)||this.checkLine(t,o,1,-1,3))){this.winner=this.board[t][o];return}}checkLine(e,t,o,n,r){const c=this.board[e][t];for(let l=1;l<r;l++){const d=e+o*l,f=t+n*l;if(!this.isWithinGrid(d,f)||this.board[d][f]!==c)return!1}return!0}switchPlayer(){this.currentPlayer=this.currentPlayer==="X"?"O":"X"}}class S{constructor(e){y(this,"player");this.player=e}getValidPlacements(e,t,o,n){const r=[];for(let c=t;c<t+n;c++)for(let l=o;l<o+n;l++)e[c][l]===null&&r.push({x:c,y:l});return r}getOwnPieces(e){const t=[];for(let o=0;o<e.length;o++)for(let n=0;n<e[o].length;n++)e[o][n]===this.player&&t.push({x:o,y:n});return t}getValidGridMoves(e,t,o,n){const r={Up:[0,-1],Down:[0,1],Left:[-1,0],Right:[1,0],UpLeft:[-1,-1],UpRight:[1,-1],DownLeft:[-1,1],DownRight:[1,1]},c=[];for(const l in r){const[d,f]=r[l],a=e+d,h=t+f;a>=0&&h>=0&&a+o<=n&&h+o<=n&&c.push(l)}return c}pickMoveAction(e,t,o,n){const r=this.getValidPlacements(e,t,o,n);return r.length>0?r[Math.floor(Math.random()*r.length)]:null}findWinningMove(e,t,o,n){const r=t+n,c=o+n,l=(a,h,p,g,P)=>{for(let u=1;u<3;u++){const m=h+g*u,v=p+P*u;if(m<t||m>=r||v<o||v>=c||a[m][v]!==this.player)return!1}return!0},d=this.getOwnPieces(e).filter(a=>a.x>=t&&a.x<r&&a.y>=o&&a.y<c),f=this.getValidPlacements(e,t,o,n);for(const a of d)for(const h of f){const p=e.map(g=>g.slice());if(p[a.x][a.y]=null,p[h.x][h.y]=this.player,l(p,h.x,h.y,1,0)||l(p,h.x,h.y,0,1)||l(p,h.x,h.y,1,1)||l(p,h.x,h.y,1,-1))return{from:a,to:h}}return null}findBlockingMove(e,t,o,n,r){const c=t+n,l=o+n,d=(a,h,p,g,P)=>{for(let u=1;u<3;u++){const m=h+g*u,v=p+P*u;if(m<t||m>=c||v<o||v>=l||a[m][v]!==r)return!1}return!0},f=this.getValidPlacements(e,t,o,n);for(const a of f){const h=e.map(p=>p.slice());if(h[a.x][a.y]=r,d(h,a.x,a.y,1,0)||d(h,a.x,a.y,0,1)||d(h,a.x,a.y,1,1)||d(h,a.x,a.y,1,-1))return a}return null}pickMove(e,t,o,n,r,c){const l=this.player==="X"?"O":"X";if(r[this.player]<c){const u=this.findBlockingMove(e,t,o,n,l);if(u)return{type:"place",to:u};const m=this.pickMoveAction(e,t,o,n);return m?{type:"place",to:m}:null}const d=this.findWinningMove(e,t,o,n);if(d)return{type:"move",from:d.from,to:d.to};const f=this.findBlockingMove(e,t,o,n,l);if(f){const u=this.getOwnPieces(e).filter(m=>m.x>=t&&m.x<t+n&&m.y>=o&&m.y<o+n);if(u.length)return{type:"move",from:u[Math.floor(Math.random()*u.length)],to:f}}const a=this.getOwnPieces(e),h=this.getValidPlacements(e,t,o,n),p=a.filter(u=>u.x>=t&&u.x<t+n&&u.y>=o&&u.y<o+n),g=[];if(p.length&&h.length){const u=p[Math.floor(Math.random()*p.length)],m=h[Math.floor(Math.random()*h.length)];g.push({type:"move",from:u,to:m})}const P=this.getValidGridMoves(t,o,n,e.length);if(P.length){const u=P[Math.floor(Math.random()*P.length)];g.push({type:"grid",direction:u})}return g.length===0?null:g[Math.floor(Math.random()*g.length)]}}const z=new URLSearchParams(window.location.search),U=z.get("mode")||"hvh",G=U==="hva",H="O",D=G?new S(H):null,i=new q;let x,T=!1,V,R;const $=document.createElement("h1");$.textContent="TIC TAC TWO";document.body.appendChild($);const b=document.createElement("div");b.classList.add("mode-buttons");const L=document.createElement("button");L.textContent="Human vs Human";L.onclick=()=>window.location.search="?mode=hvh";const k=document.createElement("button");k.textContent="Human vs AI";k.onclick=()=>window.location.search="?mode=hva";b.appendChild(L);b.appendChild(k);document.body.appendChild(b);(U==="hvh"?L:k).classList.add("active-mode");const E=document.createElement("p");E.style.fontWeight="bold";E.style.color="#666";E.textContent=`Current Mode: ${G?"Human vs AI ðŸ¤–":"Human vs Human ðŸ‘¥"}`;document.body.appendChild(E);const I=document.createElement("h2");I.textContent=`Player Turn: ${i.currentPlayer}`;document.body.appendChild(I);const w=document.createElement("p");w.textContent="Place your pieces inside the grid.";document.body.appendChild(w);const W=document.createElement("p");W.textContent="Time: 0s";document.body.appendChild(W);x=j(i.boardState,Z,i.gridStartX,i.gridStartY,i.gridSize);document.body.appendChild(x);const B=document.createElement("div");B.classList.add("controls");const K=["UpLeft","Up","UpRight","Left","Right","DownLeft","Down","DownRight"];K.forEach(s=>{const e=document.createElement("button");e.textContent=s,e.disabled=!0,e.onclick=()=>Q(s),B.appendChild(e)});document.body.appendChild(B);const O=document.createElement("button");O.textContent="Reset Game";O.classList.add("reset-btn");O.onclick=()=>window.location.reload();document.body.appendChild(O);function N(){const s=i.piecesPlaced.X>=2&&i.piecesPlaced.O>=2;document.querySelectorAll(".controls button").forEach(e=>{e.disabled=!s}),i.allowPieceMove=s,C()}function C(){if(i.winner){w.textContent=`Player ${i.winner} wins!`,clearInterval(V);return}i.piecesPlaced.X<i.maxPieces||i.piecesPlaced.O<i.maxPieces?w.textContent=`Player ${i.currentPlayer}, place a piece inside the grid.`:w.textContent=`Player ${i.currentPlayer}, you can move a piece or move the grid.`,I.textContent=`Player Turn: ${i.currentPlayer}`}function J(){T||(T=!0,R=Date.now(),V=setInterval(()=>{const s=Math.floor((Date.now()-R)/1e3);W.textContent=`Time: ${s}s`},1e3))}function Q(s){i.winner||i.moveGrid(s)&&(M(x,i.boardState,i.gridStartX,i.gridStartY,i.gridSize),C(),A())}function Z(s,e,t){if(!i.winner){if(J(),i.allowPieceMove){if(i.selectedPiece){if(i.isWithinGrid(s,e)&&i.movePiece(s,e)){M(x,i.boardState,i.gridStartX,i.gridStartY,i.gridSize),i.selectedPiece=null,C(),A();return}}else if(i.isWithinGrid(s,e)&&i.selectPiece(s,e)){t.target.classList.add("selected"),w.textContent="Now click an empty spot to move the piece.";return}}i.piecesPlaced[i.currentPlayer]<i.maxPieces&&(i.makeAMove(s,e)?(M(x,i.boardState,i.gridStartX,i.gridStartY,i.gridSize),N(),C(),A()):w.textContent="Invalid move! Pick an empty cell inside the grid.")}}function A(){!G||i.currentPlayer!==H||i.winner||!D||setTimeout(()=>{const s=D.pickMove(i.boardState,i.gridStartX,i.gridStartY,i.gridSize,i.piecesPlaced,i.maxPieces);s&&(s.type==="place"&&s.to?i.makeAMove(s.to.x,s.to.y):s.type==="move"&&s.from&&s.to?(i.selectedPiece=s.from,i.movePiece(s.to.x,s.to.y)):s.type==="grid"&&s.direction&&i.moveGrid(s.direction),M(x,i.boardState,i.gridStartX,i.gridStartY,i.gridSize),N(),C())},500)}
